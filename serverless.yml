service: notes-crud-old
frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: eu-central-1

#package: # packages each lambda function separately, for this to work requires each lambda function to be in different file
#  individually: true

plugins:
  - serverless-iam-roles-per-function
  - serverless-plugin-typescript
  - serverless-esbuild
  - serverless-prune-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  esbuild: # for bundling
    bundle: true
    minify: true
  prune: # for removing older versions of the lambda functions
    automatic: true
    number: 1

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: {"Ref": "cognitoUserPool"}
      COGNITO_WEB_CLIENT_ID: {"Ref": "cognitoUserPoolWebClient"}

  createNote:
    handler: handler.createNote
#    package: # can exclude specifically files
#      patterns:
#        - '!functions/deleteNote.js'
#        - '!functions/getAllNote.js'
#        - '!functions/getNote.js'
#        - '!functions/updateNote.js'

    environment:
      NOTES_TABLE_NAME: { "Ref": "notesTable" }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: Fn::GetAtt notesTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorizer

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: { "Ref": "notesTable" }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: Fn::GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorizer

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: { "Ref": "notesTable" }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: Fn::GetAtt notesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorizer

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: { "Ref": "notesTable" }
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: Fn::GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          authorizer:
            name: userpool_authorizer
            arn: Fn::GetAtt cognitoUserPool.Arn
            type: COGNITO_USER_POOLS

# you can add CloudFormation resource templates here
resources:
  Resources:
    # Notes DynamoDB table
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH

    # Cognito user pool
    cognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: MyNotesUP-${self:provider.stage}

    # User Pool web Client
    cognitoUserPoolWebClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: {"Ref": "cognitoUserPool"}
        ClientName: web
        AllowedOAuthFlows:
          - implicit
        CallbackURLs:
          - http://localhost:3000 # any base url where to redirect after login
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - phone
          - email
          - openid
          - profile
        SupportedIdentityProviders:
          - COGNITO
        ExplicitAuthFlows:
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_USER_SRP_AUTH

    # User Pool Domain
    cognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: {"Ref": "cognitoUserPool"}
        Domain: mynotescd-${self:provider.stage}

    # Application parameters
    userPoolArnParam:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /notes/${self:provider.stage}/userPoolArn
        Type: String
        Value: Fn::GetAtt cognitoUserPool.Arn
  
    # Cache policy
    restAPICachePolicy:
      Type: AWS::CloudFront::CachePolicy
      Properties:
        CachePolicyConfig:
          DefaultTTL: 300
          MaxTTL: 31536000
          MinTTL: 60
          Name: RestApiCachePolicy
          ParametersInCacheKeyAndForwardedToOrigin:
            CookieConfig:
              CookieBehavior: none
            EnableAcceptEncodingBrotli: true
            EnabelAcceptEncodingGzip: true
            HeadersConfig:
              HeaderBehavior: whitelist
              Headers:
                - Authorization
              QueryStringsConfig:
                QueryStringBehavior: none

    # CloudFront distribution
    cloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: restApiOrigin
            CachePolicyId: {Ref: restApiCachePolicy}
            ViewerProtocolPolicy: https-only
          CacheBehaviors:
            - PathPattern: /dev/*
              TargetOriginId: restApiOrigin
              CachePolicyId: {Ref: restApiCachePolicy}
              ViewerProtocolPolicy: https-only
          Origins:
            - Id: restApiOrigin
              DomainName: Fn::Join:
                - '.'
                - - {Ref: "ApiGatewayRestApi"}
                  - 'execute-api'
                  - ${aws:region}
                  - "amazonaws.com"
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          
              

